// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1api

import (
	context "context"
	common "github.com/XHXHXHX/medical_marketing_proto/gen/go/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiUserServiceClient is the client API for ApiUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiUserServiceClient interface {
	// 登录.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 注销.
	Logout(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error)
	// 用户信息.
	UserInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// 修改密码.
	UserChangePasswd(ctx context.Context, in *UserChangePasswdRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type apiUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiUserServiceClient(cc grpc.ClientConnInterface) ApiUserServiceClient {
	return &apiUserServiceClient{cc}
}

func (c *apiUserServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/v1api.report.apiUserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) Logout(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/v1api.report.apiUserService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) UserInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/v1api.report.apiUserService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) UserChangePasswd(ctx context.Context, in *UserChangePasswdRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/v1api.report.apiUserService/UserChangePasswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiUserServiceServer is the server API for ApiUserService service.
// All implementations must embed UnimplementedApiUserServiceServer
// for forward compatibility
type ApiUserServiceServer interface {
	// 登录.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 注销.
	Logout(context.Context, *common.Empty) (*common.Empty, error)
	// 用户信息.
	UserInfo(context.Context, *common.Empty) (*UserInfoResponse, error)
	// 修改密码.
	UserChangePasswd(context.Context, *UserChangePasswdRequest) (*common.Empty, error)
	mustEmbedUnimplementedApiUserServiceServer()
}

// UnimplementedApiUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiUserServiceServer struct {
}

func (UnimplementedApiUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedApiUserServiceServer) Logout(context.Context, *common.Empty) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedApiUserServiceServer) UserInfo(context.Context, *common.Empty) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedApiUserServiceServer) UserChangePasswd(context.Context, *UserChangePasswdRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePasswd not implemented")
}
func (UnimplementedApiUserServiceServer) mustEmbedUnimplementedApiUserServiceServer() {}

// UnsafeApiUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiUserServiceServer will
// result in compilation errors.
type UnsafeApiUserServiceServer interface {
	mustEmbedUnimplementedApiUserServiceServer()
}

func RegisterApiUserServiceServer(s grpc.ServiceRegistrar, srv ApiUserServiceServer) {
	s.RegisterService(&ApiUserService_ServiceDesc, srv)
}

func _ApiUserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.report.apiUserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.report.apiUserService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).Logout(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.report.apiUserService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).UserInfo(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_UserChangePasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangePasswdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).UserChangePasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.report.apiUserService/UserChangePasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).UserChangePasswd(ctx, req.(*UserChangePasswdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiUserService_ServiceDesc is the grpc.ServiceDesc for ApiUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1api.report.apiUserService",
	HandlerType: (*ApiUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ApiUserService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ApiUserService_Logout_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _ApiUserService_UserInfo_Handler,
		},
		{
			MethodName: "UserChangePasswd",
			Handler:    _ApiUserService_UserChangePasswd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1api/user.proto",
}
