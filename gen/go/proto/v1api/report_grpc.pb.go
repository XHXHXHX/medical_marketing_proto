// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiReportServiceClient is the client API for ApiReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiReportServiceClient interface {
	// 报单登记.
	ReportCreate(ctx context.Context, in *ReportCreateRequest, opts ...grpc.CallOption) (*ReportCreateResponse, error)
}

type apiReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiReportServiceClient(cc grpc.ClientConnInterface) ApiReportServiceClient {
	return &apiReportServiceClient{cc}
}

func (c *apiReportServiceClient) ReportCreate(ctx context.Context, in *ReportCreateRequest, opts ...grpc.CallOption) (*ReportCreateResponse, error) {
	out := new(ReportCreateResponse)
	err := c.cc.Invoke(ctx, "/v1api.report.apiReportService/ReportCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiReportServiceServer is the server API for ApiReportService service.
// All implementations must embed UnimplementedApiReportServiceServer
// for forward compatibility
type ApiReportServiceServer interface {
	// 报单登记.
	ReportCreate(context.Context, *ReportCreateRequest) (*ReportCreateResponse, error)
	mustEmbedUnimplementedApiReportServiceServer()
}

// UnimplementedApiReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiReportServiceServer struct {
}

func (UnimplementedApiReportServiceServer) ReportCreate(context.Context, *ReportCreateRequest) (*ReportCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCreate not implemented")
}
func (UnimplementedApiReportServiceServer) mustEmbedUnimplementedApiReportServiceServer() {}

// UnsafeApiReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiReportServiceServer will
// result in compilation errors.
type UnsafeApiReportServiceServer interface {
	mustEmbedUnimplementedApiReportServiceServer()
}

func RegisterApiReportServiceServer(s grpc.ServiceRegistrar, srv ApiReportServiceServer) {
	s.RegisterService(&ApiReportService_ServiceDesc, srv)
}

func _ApiReportService_ReportCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReportServiceServer).ReportCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.report.apiReportService/ReportCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReportServiceServer).ReportCreate(ctx, req.(*ReportCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiReportService_ServiceDesc is the grpc.ServiceDesc for ApiReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1api.report.apiReportService",
	HandlerType: (*ApiReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportCreate",
			Handler:    _ApiReportService_ReportCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1api/report.proto",
}
