// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiStatisticsServiceClient is the client API for ApiStatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiStatisticsServiceClient interface {
	// 市场部统计.
	StatisticsMarket(ctx context.Context, in *StatisticsMarketRequest, opts ...grpc.CallOption) (*StatisticsMarketResponse, error)
	// 客服部统计.
	StatisticsCustomer(ctx context.Context, in *StatisticsCustomerRequest, opts ...grpc.CallOption) (*StatisticsCustomerResponse, error)
}

type apiStatisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiStatisticsServiceClient(cc grpc.ClientConnInterface) ApiStatisticsServiceClient {
	return &apiStatisticsServiceClient{cc}
}

func (c *apiStatisticsServiceClient) StatisticsMarket(ctx context.Context, in *StatisticsMarketRequest, opts ...grpc.CallOption) (*StatisticsMarketResponse, error) {
	out := new(StatisticsMarketResponse)
	err := c.cc.Invoke(ctx, "/v1api.statistics.apiStatisticsService/StatisticsMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiStatisticsServiceClient) StatisticsCustomer(ctx context.Context, in *StatisticsCustomerRequest, opts ...grpc.CallOption) (*StatisticsCustomerResponse, error) {
	out := new(StatisticsCustomerResponse)
	err := c.cc.Invoke(ctx, "/v1api.statistics.apiStatisticsService/StatisticsCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiStatisticsServiceServer is the server API for ApiStatisticsService service.
// All implementations must embed UnimplementedApiStatisticsServiceServer
// for forward compatibility
type ApiStatisticsServiceServer interface {
	// 市场部统计.
	StatisticsMarket(context.Context, *StatisticsMarketRequest) (*StatisticsMarketResponse, error)
	// 客服部统计.
	StatisticsCustomer(context.Context, *StatisticsCustomerRequest) (*StatisticsCustomerResponse, error)
	mustEmbedUnimplementedApiStatisticsServiceServer()
}

// UnimplementedApiStatisticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiStatisticsServiceServer struct {
}

func (UnimplementedApiStatisticsServiceServer) StatisticsMarket(context.Context, *StatisticsMarketRequest) (*StatisticsMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsMarket not implemented")
}
func (UnimplementedApiStatisticsServiceServer) StatisticsCustomer(context.Context, *StatisticsCustomerRequest) (*StatisticsCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsCustomer not implemented")
}
func (UnimplementedApiStatisticsServiceServer) mustEmbedUnimplementedApiStatisticsServiceServer() {}

// UnsafeApiStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiStatisticsServiceServer will
// result in compilation errors.
type UnsafeApiStatisticsServiceServer interface {
	mustEmbedUnimplementedApiStatisticsServiceServer()
}

func RegisterApiStatisticsServiceServer(s grpc.ServiceRegistrar, srv ApiStatisticsServiceServer) {
	s.RegisterService(&ApiStatisticsService_ServiceDesc, srv)
}

func _ApiStatisticsService_StatisticsMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiStatisticsServiceServer).StatisticsMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.statistics.apiStatisticsService/StatisticsMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiStatisticsServiceServer).StatisticsMarket(ctx, req.(*StatisticsMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiStatisticsService_StatisticsCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiStatisticsServiceServer).StatisticsCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.statistics.apiStatisticsService/StatisticsCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiStatisticsServiceServer).StatisticsCustomer(ctx, req.(*StatisticsCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiStatisticsService_ServiceDesc is the grpc.ServiceDesc for ApiStatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiStatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1api.statistics.apiStatisticsService",
	HandlerType: (*ApiStatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StatisticsMarket",
			Handler:    _ApiStatisticsService_StatisticsMarket_Handler,
		},
		{
			MethodName: "StatisticsCustomer",
			Handler:    _ApiStatisticsService_StatisticsCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1api/statistics.proto",
}
